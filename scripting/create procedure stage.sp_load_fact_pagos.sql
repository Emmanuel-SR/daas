CREATE PROCEDURE STAGE.SP_LOAD_FACT_PAGOS (@FECHA_CARGA AS DATE) AS

BEGIN

  DECLARE @CREATION_USER AS VARCHAR(100);
  DECLARE @CREATION_DATE AS DATETIME;
  DECLARE @CREATION_IP AS VARCHAR(50);
  DECLARE @PERIODO AS CHAR(6); -- FORMAT YYYYMM
  DECLARE @ERROR AS INTEGER;
  
  BEGIN TRY

  SELECT @CREATION_USER = CAST(SERVERPROPERTY('ServerName') AS NVARCHAR) + '-' + CAST(SERVERPROPERTY('MachineName') AS NVARCHAR);
  SELECT @CREATION_DATE = GETDATE();
  SELECT @CREATION_IP = DBO.FN_GET_CURRENT_IP();
  SELECT @PERIODO = LEFT(CONVERT(CHAR, @FECHA_CARGA, 112), 6);

  -- STEP 00: CREDIT EXISTS AND HAS AN VALID ASSIGNMENT

  SELECT @ERROR = COUNT(1)
  FROM STAGE.FACT_PAGOS P
  LEFT JOIN DATA.DIM_CREDITO C 
    ON P.CODIGO_CREDITO = C.CODIGO_CREDITO
  LEFT JOIN DATA.HIST_ASIGNACION H
    ON H.CODIGO_PERIODO = @PERIODO AND C.ID_CREDITO = H.ID_CREDITO
  WHERE H.ID_CREDITO IS NULL;

  IF @ERROR > 0
    BEGIN
     THROW 51000, 'There are credits that do not exist or are not in an assignment.', 1;
    END

  -- STEP 01: CREATE TABLE STAGE.TMP_FACT_PAGOS_01
  IF OBJECT_ID(N'[CIP_DM].[STAGE].[TMP_FACT_PAGOS_01]',N'U') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_FACT_PAGOS_01;

    SELECT
      P1.ID_FECHA,
      P1.ID_CREDITO,
      P1.MONTO,
      P1.MONEDA,
      P1.AGENCIA,
      P1.CREATION_USER,
      P1.CREATION_DATE,
      P1.CREATION_IP,
      P1.MODIFICATION_USER,
      P1.MODIFICATION_DATE,
      P1.MODIFICATION_IP
    INTO STAGE.TMP_FACT_PAGOS_01
    FROM DATA.FACT_PAGOS_1 P1
    WHERE LEFT(P1.ID_FECHA,6) <> @PERIODO

  -- STEP 02: CREATE TABLE STAGE.TMP_FACT_PAGOS_02
  IF OBJECT_ID(N'[CIP_DM].[STAGE].[TMP_FACT_PAGOS_02]',N'U') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_FACT_PAGOS_02;

    SELECT
      F.ID_FECHA,
      C.ID_CREDITO,
      CAST(P.MONTO AS DECIMAL(18,2)) AS MONTO,
      P.MONEDA,
      P.AGENCIA,
      @CREATION_USER AS CREATION_USER,
      @CREATION_DATE AS CREATION_DATE,
      @CREATION_IP AS CREATION_IP,
      CAST(NULL AS VARCHAR(100)) AS MODIFICATION_USER,
      CAST(NULL AS DATETIME) AS MODIFICATION_DATE,
      CAST(NULL AS VARCHAR(50)) AS MODIFICATION_IP
    INTO STAGE.TMP_FACT_PAGOS_02
    FROM STAGE.FACT_PAGOS P
    LEFT JOIN DATA.DIM_FECHA F ON F.ID_FECHA = P.FECHA_PAGO
    LEFT JOIN DATA.DIM_CREDITO C ON C.CODIGO_CREDITO = P.CODIGO_CREDITO;

  -- STEP 03: CREATE TABLE DATA.FACT_PAGOS_1_PREV
  IF OBJECT_ID(N'[CIP_DM].[DATA].[FACT_PAGOS_1_PREV]',N'U') IS NOT NULL DROP TABLE CIP_DM.DATA.FACT_PAGOS_1_PREV;

  SELECT
    PREV.ID_FECHA,
    PREV.ID_CREDITO,
    PREV.MONTO,
    PREV.MONEDA,
    PREV.AGENCIA,
    PREV.CREATION_USER,
    PREV.CREATION_DATE,
    PREV.CREATION_IP,
    PREV.MODIFICATION_USER,
    PREV.MODIFICATION_DATE,
    PREV.MODIFICATION_IP
  INTO DATA.FACT_PAGOS_1_PREV FROM
  (SELECT
    F1.ID_FECHA,
    F1.ID_CREDITO,
    F1.MONTO,
    F1.MONEDA,
    F1.AGENCIA,
    F1.CREATION_USER,
    F1.CREATION_DATE,
    F1.CREATION_IP,
    F1.MODIFICATION_USER,
    F1.MODIFICATION_DATE,
    F1.MODIFICATION_IP
  FROM STAGE.TMP_FACT_PAGOS_01 F1
  UNION ALL
  SELECT
    F2.ID_FECHA,
    F2.ID_CREDITO,
    F2.MONTO,
    F2.MONEDA,
    F2.AGENCIA,
    F2.CREATION_USER,
    F2.CREATION_DATE,
    F2.CREATION_IP,
    F2.MODIFICATION_USER,
    F2.MODIFICATION_DATE,
    F2.MODIFICATION_IP
  FROM STAGE.TMP_FACT_PAGOS_02 F2) PREV;

  -- STEP 04: DROP TMP TABLAS
  IF OBJECT_ID(N'[CIP_DM].[STAGE].[TMP_FACT_PAGOS_01]',N'U') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_FACT_PAGOS_01;
  IF OBJECT_ID(N'[CIP_DM].[STAGE].[TMP_FACT_PAGOS_02]',N'U') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_FACT_PAGOS_02;

  -- STEP 05: CREATE INDEXES AND CONSTRAINTS DATA.FACT_PAGOS_1_PREV
  ALTER TABLE DATA.FACT_PAGOS_1_PREV ALTER COLUMN ID_FECHA INTEGER NOT NULL;
  ALTER TABLE DATA.FACT_PAGOS_1_PREV ALTER COLUMN ID_CREDITO INTEGER NOT NULL;
  ALTER TABLE DATA.FACT_PAGOS_1_PREV ALTER COLUMN MONTO DECIMAL(18,2) NOT NULL;
  ALTER TABLE DATA.FACT_PAGOS_1_PREV ALTER COLUMN MONEDA CHAR(3) NOT NULL;
  ALTER TABLE DATA.FACT_PAGOS_1_PREV ADD CONSTRAINT FK_PAGOS1_FECHA_PREV FOREIGN KEY (ID_FECHA)
    REFERENCES DATA.DIM_FECHA(ID_FECHA);
  ALTER TABLE DATA.FACT_PAGOS_1_PREV ADD CONSTRAINT FK_PAGOS1_CREDITO_PREV FOREIGN KEY (ID_CREDITO)
    REFERENCES DATA.DIM_CREDITO(ID_CREDITO);

  -- STEP 06: REPLACE SYNONYM DATA.FACT_PAGOS TO DATA.FACT_PAGOS_1_PREV
  DROP SYNONYM DATA.FACT_PAGOS;
  CREATE SYNONYM DATA.FACT_PAGOS FOR DATA.FACT_PAGOS_1_PREV;

  -- STEP 07: RENAME TABLE DATA.FACT_PAGOS_1 TO DATA.FACT_PAGOS_1_OLD
  EXEC sp_rename 'DATA.FACT_PAGOS_1', 'FACT_PAGOS_1_OLD';

  -- STEP 08: RENAME INDEXES AND CONSTRAINTS DATA.FACT_PAGOS_1_OLD
  EXEC sp_rename 'DATA.FK_PAGOS1_FECHA', 'FK_PAGOS1_FECHA_OLD';
  EXEC sp_rename 'DATA.FK_PAGOS1_CREDITO', 'FK_PAGOS1_CREDITO_OLD';

  -- STEP 09: REPLACE SYNONYM DATA.FACT_PAGOS TO DATA.FACT_PAGOS_1_OLD
  DROP SYNONYM DATA.FACT_PAGOS;
  CREATE SYNONYM DATA.FACT_PAGOS FOR DATA.FACT_PAGOS_1_OLD;

  -- STEP 10: RENAME TABLE DATA.FACT_PAGOS_1_PREV TO DATA.FACT_PAGOS_1
  EXEC sp_rename 'DATA.FACT_PAGOS_1_PREV', 'FACT_PAGOS_1';

  -- STEP 11: RENAME INDEXES AND CONSTRAINTS DATA.FACT_PAGOS_1_PREV 
  EXEC sp_rename 'DATA.FK_PAGOS1_FECHA_PREV', 'FK_PAGOS1_FECHA';
  EXEC sp_rename 'DATA.FK_PAGOS1_CREDITO_PREV', 'FK_PAGOS1_CREDITO';

  -- STEP 12: REPLACE SYNONYM DATA.FACT_PAGOS TO DATA.FACT_PAGOS_1
  DROP SYNONYM DATA.FACT_PAGOS;
  CREATE SYNONYM DATA.FACT_PAGOS FOR DATA.FACT_PAGOS_1;

  -- STEP 10: DROP OLD TABLE
  IF OBJECT_ID(N'[CIP_DM].[DATA].[FACT_PAGOS_1_OLD]',N'U') IS NOT NULL DROP TABLE CIP_DM.DATA.FACT_PAGOS_1_OLD;

  -- STEP 11: ADD DEFAULT CONSTRAINTS
  ALTER TABLE DATA.FACT_PAGOS_1 ADD CONSTRAINT DF_FACTPAGOS1_CREATIONUSER
    DEFAULT CAST(SERVERPROPERTY('ServerName') AS NVARCHAR) + '-' + CAST(SERVERPROPERTY('MachineName') AS NVARCHAR)
      FOR CREATION_USER;
  ALTER TABLE DATA.FACT_PAGOS_1 ADD CONSTRAINT DF_FACTPAGOS1_CREATIONDATE DEFAULT GETDATE()
      FOR CREATION_DATE;
  ALTER TABLE DATA.FACT_PAGOS_1 ADD CONSTRAINT DF_FACTPAGOS1_CREATIONIP DEFAULT DBO.FN_GET_CURRENT_IP()
      FOR CREATION_IP;

  END TRY

  BEGIN CATCH

    DECLARE @ERROR_MESSAGE NVARCHAR(4000);
    DECLARE @ERROR_SEVERITY INT;
    DECLARE @ERROR_STATE INT;

    SELECT
      @ERROR_MESSAGE = ERROR_MESSAGE(),
      @ERROR_SEVERITY = ERROR_SEVERITY(),
      @ERROR_STATE = ERROR_STATE();

    RAISERROR (@ERROR_MESSAGE, @ERROR_SEVERITY, @ERROR_STATE);

  END CATCH

END;