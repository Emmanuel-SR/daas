CREATE PROCEDURE STAGE.SP_LOAD_FACT_NEGOTATION (@LOAD_DATE AS DATE) AS

BEGIN

  DECLARE @CREATION_USER AS VARCHAR(100);
  DECLARE @CREATION_DATE AS DATETIME;
  DECLARE @CREATION_IP AS VARCHAR(50);
  DECLARE @PERIOD AS CHAR(6);

  BEGIN TRY

  SELECT @CREATION_USER = CAST(SERVERPROPERTY('ServerName') AS NVARCHAR) + '-' + CAST(SERVERPROPERTY('MachineName') AS NVARCHAR);
  SELECT @CREATION_DATE = GETDATE();
  SELECT @CREATION_IP = DBO.FN_GET_CURRENT_IP();

  SELECT @PERIOD = LEFT(CONVERT(CHAR, @LOAD_DATE, 112), 6);  /* YYYYMM */

  -- STEP 01: CREATE TABLE STAGE.TMP_FACT_NEGOTATION_01
  IF OBJECT_ID(N'[CIP_DM].[STAGE].[TMP_FACT_NEGOTATION_01]',N'U') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_FACT_NEGOTATION_01;

  SELECT
    F1.CREDIT_KEY,
    F1.ACTION_KEY,
    F1.RESPONSE_KEY,
    F1.CONTACT_KEY,
    F1.NEGOTIATOR_KEY,
    F1.CARRIER_NAME,
    F1.HISTORY_DATE,
    F1.OBSERVATION,
    F1.TELEPHONE_NUMBER,
    F1.TELEPHONE_STATUS,
    F1.PROMISE_AMNT,
    F1.PROMISE_NEXT_DATE,
    F1.FLAG,
    F1.CREATION_USER,
    F1.CREATION_DATE,
    F1.CREATION_IP,
    F1.MODIFICATION_USER,
    F1.MODIFICATION_DATE,
    F1.MODIFICATION_IP
  INTO STAGE.TMP_FACT_NEGOTATION_01
  FROM DATA.FACT_NEGOTATION_1 F1
  WHERE LEFT(F1.HISTORY_DATE,6) <> @PERIOD; /* YYYYMM */

  -- STEP 02: CREATE TABLE STAGE.TMP_FACT_NEGOTATION_02
  IF OBJECT_ID(N'[CIP_DM].[STAGE].[TMP_FACT_NEGOTATION_02]',N'U') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_FACT_NEGOTATION_02;

  SELECT
    CE.CREDIT_KEY,
    AC.ACTION_KEY,
    RP.RESPONSE_KEY,
    CO.CONTACT_KEY,
    NE.NEGOTIATOR_KEY,
    FN.CARRIER_NAME,
    D.DATE_KEY AS HISTORY_DATE,
    FN.OBSERVATION,
    FN.TELEPHONE_NUMBER,
    FN.TELEPHONE_STATUS,
    CONVERT(DECIMAL(18,2), FN.PROMISE_AMNT) AS PROMISE_AMNT,
    FN.PROMISE_NEXT_DATE,
    FN.FLAG,
    @CREATION_USER AS CREATION_USER,
    @CREATION_DATE AS CREATION_DATE,
    @CREATION_IP AS CREATION_IP,
    CAST(NULL AS VARCHAR(100)) AS MODIFICATION_USER,
    CAST(NULL AS DATETIME) AS MODIFICATION_DATE,
    CAST(NULL AS VARCHAR(50)) AS MODIFICATION_IP
  INTO STAGE.TMP_FACT_NEGOTATION_02
  FROM STAGE.FACT_NEGOTATION FN
  LEFT JOIN DATA.DIM_DATE D
              ON D.DATE_KEY = FN.HISTORY_DATE
  LEFT JOIN DATA.DIM_CREDIT CE
              ON CE.CREDIT_CODE = FN.CREDIT_CODE
  LEFT JOIN DATA.DIM_NEGOTIATOR NE
              ON NE.NEGOTIATOR_CODE = FN.NEGOTIATOR_CODE
  LEFT JOIN DATA.DIM_ACTION AC
              ON AC.ACTION_NAME = FN.ACTION_NAME
  LEFT JOIN DATA.DIM_RESPONSE RP
              ON RP.RESPONSE_NAME = FN.RESPONSE_NAME
  LEFT JOIN DATA.DIM_CONTACT CO
              ON CO.CONTACT_NAME = FN.CONTACT_NAME;

  -- STEP 03: CREATE TABLE DATA.FACT_NEGOTATION_1_PREV
  IF OBJECT_ID('[CIP_DM].[DATA].[FACT_NEGOTATION_1_PREV]') IS NOT NULL DROP TABLE CIP_DM.DATA.FACT_NEGOTATION_1_PREV;

  SELECT
    PREV.CREDIT_KEY,
    PREV.ACTION_KEY,
    PREV.RESPONSE_KEY,
    PREV.CONTACT_KEY,
    PREV.NEGOTIATOR_KEY,
    PREV.CARRIER_NAME,
    PREV.HISTORY_DATE,
    PREV.OBSERVATION,
    PREV.TELEPHONE_NUMBER,
    PREV.TELEPHONE_STATUS,
    PREV.PROMISE_AMNT,
    PREV.PROMISE_NEXT_DATE,
    PREV.FLAG,
    PREV.CREATION_USER,
    PREV.CREATION_DATE,
    PREV.CREATION_IP,
    PREV.MODIFICATION_USER,
    PREV.MODIFICATION_DATE,
    PREV.MODIFICATION_IP
  INTO DATA.FACT_NEGOTATION_1_PREV FROM
  (SELECT
    F1.CREDIT_KEY,
    F1.ACTION_KEY,
    F1.RESPONSE_KEY,
    F1.CONTACT_KEY,
    F1.NEGOTIATOR_KEY,
    F1.CARRIER_NAME,
    F1.HISTORY_DATE,
    F1.OBSERVATION,
    F1.TELEPHONE_NUMBER,
    F1.TELEPHONE_STATUS,
    F1.PROMISE_AMNT,
    F1.PROMISE_NEXT_DATE,
    F1.FLAG,
    F1.CREATION_USER,
    F1.CREATION_DATE,
    F1.CREATION_IP,
    F1.MODIFICATION_USER,
    F1.MODIFICATION_DATE,
    F1.MODIFICATION_IP
  FROM STAGE.TMP_FACT_NEGOTATION_01 F1
  UNION
  SELECT
    F2.CREDIT_KEY,
    F2.ACTION_KEY,
    F2.RESPONSE_KEY,
    F2.CONTACT_KEY,
    F2.NEGOTIATOR_KEY,
    F2.CARRIER_NAME,
    F2.HISTORY_DATE,
    F2.OBSERVATION,
    F2.TELEPHONE_NUMBER,
    F2.TELEPHONE_STATUS,
    F2.PROMISE_AMNT,
    F2.PROMISE_NEXT_DATE,
    F2.FLAG,
    F2.CREATION_USER,
    F2.CREATION_DATE,
    F2.CREATION_IP,
    F2.MODIFICATION_USER,
    F2.MODIFICATION_DATE,
    F2.MODIFICATION_IP
  FROM STAGE.TMP_FACT_NEGOTATION_02 F2) PREV;

  -- STEP 04: DROP TMP TABLAS
  IF OBJECT_ID('[CIP_DM].[STAGE].[TMP_FACT_NEGOTATION_01]') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_FACT_NEGOTATION_01;
  IF OBJECT_ID('[CIP_DM].[STAGE].[TMP_FACT_NEGOTATION_02]') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_FACT_NEGOTATION_02;

  -- STEP 05: CREATE INDEXES AND CONSTRAINTS DATA.FACT_NEGOTATION_1_PREV
  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ALTER COLUMN CREDIT_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ALTER COLUMN ACTION_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ALTER COLUMN RESPONSE_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ALTER COLUMN CONTACT_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ALTER COLUMN NEGOTIATOR_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ALTER COLUMN HISTORY_DATE INTEGER NOT NULL;

  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ADD CONSTRAINT FK_FACTNEG1_DIMCRED_CREDITKEY_PREV FOREIGN KEY (CREDIT_KEY)
    REFERENCES DATA.DIM_CREDIT(CREDIT_KEY);
  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ADD CONSTRAINT FK_FACTNEG1_DIMACT_ACTIONKEY_PREV FOREIGN KEY (ACTION_KEY)
    REFERENCES DATA.DIM_ACTION(ACTION_KEY);
  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ADD CONSTRAINT FK_FACTNEG1_DIMRESP_RESPONSEKEY_PREV FOREIGN KEY (RESPONSE_KEY)
    REFERENCES DATA.DIM_RESPONSE(RESPONSE_KEY);
  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ADD CONSTRAINT FK_FACTNEG1_DIMCON_CONTACTKEY_PREV FOREIGN KEY (CONTACT_KEY)
    REFERENCES DATA.DIM_CONTACT(CONTACT_KEY);
  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ADD CONSTRAINT FK_FACTNEG1_DIMNEG_NEGOTIATORKEY_PREV FOREIGN KEY (NEGOTIATOR_KEY)
    REFERENCES DATA.DIM_NEGOTIATOR(NEGOTIATOR_KEY);
  ALTER TABLE DATA.FACT_NEGOTATION_1_PREV ADD CONSTRAINT FK_FACTNEG1_DIMDATE_HISTORYDATE_PREV FOREIGN KEY (HISTORY_DATE)
    REFERENCES DATA.DIM_DATE(DATE_KEY);

  -- STEP 06: REPLACE SYNONYM DATA.FACT_NEGOTATION TO DATA.FACT_NEGOTATION_1_PREV
  DROP SYNONYM DATA.FACT_NEGOTATION;
  CREATE SYNONYM DATA.FACT_NEGOTATION FOR DATA.FACT_NEGOTATION_1_PREV;

  -- STEP 07: RENAME TABLE DATA.FACT_NEGOTATION_1 TO DATA.FACT_NEGOTATION_1_OLD
  EXEC SP_RENAME 'DATA.FACT_NEGOTATION_1', 'FACT_NEGOTATION_1_OLD';

  -- STEP 08: RENAME INDEXES AND CONSTRAINTS DATA.FACT_NEGOTATION_1_OLD
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMCRED_CREDITKEY', 'FK_FACTNEG1_DIMCRED_CREDITKEY_OLD';
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMACT_ACTIONKEY', 'FK_FACTNEG1_DIMACT_ACTIONKEY_OLD';
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMRESP_RESPONSEKEY', 'FK_FACTNEG1_DIMRESP_RESPONSEKEY_OLD';
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMCON_CONTACTKEY', 'FK_FACTNEG1_DIMCON_CONTACTKEY_OLD';
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMNEG_NEGOTIATORKEY', 'FK_FACTNEG1_DIMNEG_NEGOTIATORKEY_OLD';
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMDATE_HISTORYDATE', 'FK_FACTNEG1_DIMDATE_HISTORYDATE_OLD';
  
  -- STEP 09: REPLACE SYNONYM DATA.FACT_NEGOTATION TO DATA.FACT_NEGOTATION_1_OLD
  DROP SYNONYM DATA.FACT_NEGOTATION;
  CREATE SYNONYM DATA.FACT_NEGOTATION FOR DATA.FACT_NEGOTATION_1_OLD;

  -- STEP 10: RENAME TABLE DATA.FACT_NEGOTATION_1_PREV TO DATA.FACT_NEGOTATION_1
  EXEC SP_RENAME 'DATA.FACT_NEGOTATION_1_PREV', 'FACT_NEGOTATION_1';

  -- STEP 11: RENAME INDEXES AND CONSTRAINTS DATA.FACT_NEGOTATION_1_PREV 
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMCRED_CREDITKEY_PREV', 'FK_FACTNEG1_DIMCRED_CREDITKEY';
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMACT_ACTIONKEY_PREV', 'FK_FACTNEG1_DIMACT_ACTIONKEY';
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMRESP_RESPONSEKEY_PREV', 'FK_FACTNEG1_DIMRESP_RESPONSEKEY';
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMCON_CONTACTKEY_PREV', 'FK_FACTNEG1_DIMCON_CONTACTKEY';
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMNEG_NEGOTIATORKEY_PREV', 'FK_FACTNEG1_DIMNEG_NEGOTIATORKEY';
  EXEC SP_RENAME 'DATA.FK_FACTNEG1_DIMDATE_HISTORYDATE_PREV', 'FK_FACTNEG1_DIMDATE_HISTORYDATE';
  
  -- STEP 12: REPLACE SYNONYM DATA.FACT_NEGOTATION TO DATA.FACT_NEGOTATION_1
  DROP SYNONYM DATA.FACT_NEGOTATION;
  CREATE SYNONYM DATA.FACT_NEGOTATION FOR DATA.FACT_NEGOTATION_1;

  -- STEP 13: DROP OLD TABLE
  IF OBJECT_ID('[CIP_DM].[DATA].[FACT_NEGOTATION_1_OLD]') IS NOT NULL DROP TABLE CIP_DM.DATA.FACT_NEGOTATION_1_OLD;

  END TRY

  BEGIN CATCH

    DECLARE @ERROR_MESSAGE NVARCHAR(4000);
    DECLARE @ERROR_SEVERITY INT;
    DECLARE @ERROR_STATE INT;

    SELECT
      @ERROR_MESSAGE = ERROR_MESSAGE(),
      @ERROR_SEVERITY = ERROR_SEVERITY(),
      @ERROR_STATE = ERROR_STATE();

    RAISERROR (@ERROR_MESSAGE, @ERROR_SEVERITY, @ERROR_STATE);

  END CATCH

END;