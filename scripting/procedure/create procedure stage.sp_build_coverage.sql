CREATE PROCEDURE STAGE.SP_BUILD_COVERAGE (@LOAD_DATE AS DATE) AS

BEGIN

  DECLARE @PERIOD AS CHAR(6);

  BEGIN TRY

  SELECT @PERIOD = LEFT(CONVERT(CHAR, @LOAD_DATE, 112), 6); /* YYYYMM */

  -- STEP 01: CREATE TABLE STAGE.TMP_COVERAGE_01
  IF OBJECT_ID(N'[CIP_DM].[STAGE].[TMP_COVERAGE_01]',N'U') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_COVERAGE_01;

  SELECT
    CV1.DATE_KEY,
    CV1.PRODUCT_KEY,
    CV1.NEGOTIATOR_KEY,
    CV1.COVERAGE,
    CV1.ASSIGMENTS
  INTO STAGE.TMP_COVERAGE_01
  FROM DATA.COVERAGE_1 CV1
  WHERE LEFT(CV1.DATE_KEY,6) <> @PERIOD; /* YYYYMM */

  -- STEP 02: CREATE TABLE STAGE.TMP_COVERAGE_02
  IF OBJECT_ID(N'[CIP_DM].[STAGE].[TMP_COVERAGE_02]',N'U') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_COVERAGE_02;

    SELECT
    H.DATE_KEY,
    C.PRODUCT_KEY,
    H.NEGOTIATOR_KEY,
    (
      SELECT COUNT(DISTINCT H2.CREDIT_KEY)
      FROM DATA.HIST_ASSIGNMENT H2
      INNER JOIN DATA.DIM_CREDIT C2 ON C2.CREDIT_KEY = H2.CREDIT_KEY
      WHERE C2.PRODUCT_KEY = C.PRODUCT_KEY AND H2.NEGOTIATOR_KEY = H.NEGOTIATOR_KEY AND H2.DATE_KEY = H.DATE_KEY AND EXISTS 
      (SELECT 1 FROM DATA.FACT_NEGOTATION N WHERE N.CREDIT_KEY = H2.CREDIT_KEY AND LEFT(N.HISTORY_DATE,6) = LEFT(H2.DATE_KEY,6))
    ) AS COVERAGE,
    COUNT(H.CREDIT_KEY) AS ASSIGMENTS
  INTO STAGE.TMP_COVERAGE_02
  FROM DATA.HIST_ASSIGNMENT H
    INNER JOIN DATA.DIM_CREDIT C
    ON C.CREDIT_KEY = H.CREDIT_KEY
  WHERE LEFT(H.DATE_KEY,6) = @PERIOD
  GROUP BY H.DATE_KEY, C.PRODUCT_KEY, H.NEGOTIATOR_KEY
  ORDER BY H.DATE_KEY DESC;

  -- STEP 03: CREATE TABLE DATA.COVERAGE_1_PREV
  IF OBJECT_ID(N'[CIP_DM].[DATA].[COVERAGE_1_PREV]',N'U') IS NOT NULL DROP TABLE CIP_DM.DATA.COVERAGE_1_PREV;

  SELECT
    PREV.DATE_KEY,
    PREV.PRODUCT_KEY,
    PREV.NEGOTIATOR_KEY,
    PREV.COVERAGE,
    PREV.ASSIGMENTS
  INTO DATA.COVERAGE_1_PREV FROM
  (
    SELECT
      CV1.DATE_KEY,
      CV1.PRODUCT_KEY,
      CV1.NEGOTIATOR_KEY,
      CV1.COVERAGE,
      CV1.ASSIGMENTS
    FROM STAGE.TMP_COVERAGE_01 CV1
    UNION ALL
    SELECT
      CV2.DATE_KEY,
      CV2.PRODUCT_KEY,
      CV2.NEGOTIATOR_KEY,
      CV2.COVERAGE,
      CV2.ASSIGMENTS
    FROM STAGE.TMP_COVERAGE_02 CV2
  ) PREV
  ORDER BY DATE_KEY ASC;

  -- STEP 04: DROP TMP TABLAS
  IF OBJECT_ID('[CIP_DM].[STAGE].[TMP_COVERAGE_01]') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_COVERAGE_01;
  IF OBJECT_ID('[CIP_DM].[STAGE].[TMP_COVERAGE_02]') IS NOT NULL DROP TABLE CIP_DM.STAGE.TMP_COVERAGE_02;

  -- STEP 05: CREATE INDEXES AND CONSTRAINTS DATA.COVERAGE_1_PREV
  ALTER TABLE DATA.COVERAGE_1_PREV ALTER COLUMN DATE_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.COVERAGE_1_PREV ALTER COLUMN PRODUCT_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.COVERAGE_1_PREV ALTER COLUMN NEGOTIATOR_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.COVERAGE_1_PREV ALTER COLUMN COVERAGE INTEGER NOT NULL;
  ALTER TABLE DATA.COVERAGE_1_PREV ALTER COLUMN ASSIGMENTS INTEGER NOT NULL;

  ALTER TABLE DATA.COVERAGE_1_PREV ADD CONSTRAINT FK_COVG1_DIMDATE_DATEKEY_PREV FOREIGN KEY (DATE_KEY)
    REFERENCES DATA.DIM_DATE(DATE_KEY);
  ALTER TABLE DATA.COVERAGE_1_PREV ADD CONSTRAINT FK_COVG1_PRODUCT_KEY_PREV FOREIGN KEY (PRODUCT_KEY)
    REFERENCES DATA.DIM_PRODUCT(PRODUCT_KEY);
  ALTER TABLE DATA.COVERAGE_1_PREV ADD CONSTRAINT FK_COVG1_NEGOTIATOR_KEY_PREV FOREIGN KEY (NEGOTIATOR_KEY)
    REFERENCES DATA.DIM_NEGOTIATOR(NEGOTIATOR_KEY);

  -- STEP 06: REPLACE SYNONYM DATA.COVERAGE TO DATA.COVERAGE_1_PREV
  DROP SYNONYM DATA.COVERAGE;
  CREATE SYNONYM DATA.COVERAGE FOR DATA.COVERAGE_1_PREV;

  -- STEP 07: RENAME TABLE DATA.COVERAGE_1 TO DATA.COVERAGE_1_OLD
  EXEC sp_rename 'DATA.COVERAGE_1', 'COVERAGE_1_OLD';

  -- STEP 08: RENAME INDEXES AND CONSTRAINTS DATA.COVERAGE_1_OLD
  EXEC sp_rename 'DATA.FK_COVG1_DIMDATE_DATEKEY', 'FK_COVG1_DIMDATE_DATEKEY_OLD';
  EXEC sp_rename 'DATA.FK_COVG1_PRODUCT_KEY', 'FK_COVG1_PRODUCT_KEY_OLD';
  EXEC sp_rename 'DATA.FK_COVG1_NEGOTIATOR_KEY', 'FK_COVG1_NEGOTIATOR_KEY_OLD';

  -- STEP 09: REPLACE SYNONYM DATA.COVERAGE TO DATA.COVERAGE_1_OLD
  DROP SYNONYM DATA.COVERAGE;
  CREATE SYNONYM DATA.COVERAGE FOR DATA.COVERAGE_1_OLD;

  -- STEP 10: RENAME TABLE DATA.COVERAGE_1_PREV TO DATA.COVERAGE_1
  EXEC sp_rename 'DATA.COVERAGE_1_PREV', 'COVERAGE_1';

  -- STEP 11: RENAME INDEXES AND CONSTRAINTS DATA.COVERAGE_1
  EXEC sp_rename 'DATA.FK_COVG1_DIMDATE_DATEKEY_PREV', 'FK_COVG1_DIMDATE_DATEKEY';
  EXEC sp_rename 'DATA.FK_COVG1_PRODUCT_KEY_PREV', 'FK_COVG1_PRODUCT_KEY';
  EXEC sp_rename 'DATA.FK_COVG1_NEGOTIATOR_KEY_PREV', 'FK_COVG1_NEGOTIATOR_KEY';

  -- STEP 12: REPLACE SYNONYM DATA.COVERAGE TO DATA.COVERAGE_1
  DROP SYNONYM DATA.COVERAGE;
  CREATE SYNONYM DATA.COVERAGE FOR DATA.COVERAGE_1;

  -- STEP 13: DROP OLD TABLE
  IF OBJECT_ID(N'[CIP_DM].[DATA].[COVERAGE_1_OLD]',N'U') IS NOT NULL DROP TABLE CIP_DM.DATA.COVERAGE_1_OLD;

  END TRY

  BEGIN CATCH

    DECLARE @ERROR_MESSAGE NVARCHAR(4000);
    DECLARE @ERROR_SEVERITY INT;
    DECLARE @ERROR_STATE INT;

    SELECT
      @ERROR_MESSAGE = ERROR_MESSAGE(),
      @ERROR_SEVERITY = ERROR_SEVERITY(),
      @ERROR_STATE = ERROR_STATE();

    RAISERROR (@ERROR_MESSAGE, @ERROR_SEVERITY, @ERROR_STATE);

  END CATCH

END;