CREATE PROCEDURE STAGE.SP_BUILD_DEBT_RECOVERY AS

BEGIN

  BEGIN TRY

  -- STEP 01: CREATE TABLE DATA.DEBT_RECOVERY_1_PREV
  IF OBJECT_ID(N'[CIP_DM].[DATA].[DEBT_RECOVERY_1_PREV]',N'U') IS NOT NULL DROP TABLE CIP_DM.DATA.DEBT_RECOVERY_1_PREV;

  SELECT
    P.PAYMENT_DATE,
    C.PRODUCT_KEY,
    H.NEGOTIATOR_KEY,
    P.CURRENCY_KEY,
    COUNT(P.AMOUNT) AS PAYMENTS,
    SUM(P.AMOUNT) AS AMOUNT_RECOVERED
  INTO STAGE.TMP_DEBT_RECOVERY_02
  FROM DATA.FACT_PAYMENT P
  LEFT JOIN DATA.HIST_ASSIGNMENT H
  ON LEFT(P.PAYMENT_DATE,6) = H.PERIOD_CODE AND P.CREDIT_KEY = H.CREDIT_KEY
   INNER JOIN DATA.DIM_CREDIT C
  ON C.CREDIT_KEY = H.CREDIT_KEY
  INNER JOIN DATA.DIM_PRODUCT O
  ON O.PRODUCT_KEY = C.PRODUCT_KEY
   GROUP BY C.PRODUCT_KEY,  H.NEGOTIATOR_KEY, P.PAYMENT_DATE, P.CURRENCY_KEY
   ORDER BY P.PAYMENT_DATE ASC;

  -- STEP 02: CREATE INDEXES AND CONSTRAINTS DATA.DEBT_RECOVERY_1_PREV
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN PAYMENT_DATE INTEGER NOT NULL;
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN PRODUCT_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN NEGOTIATOR_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN CURRENCY_KEY CHAR(3) NOT NULL;
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN PAYMENTS INTEGER NOT NULL;
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN AMOUNT_RECOVERED DECIMAL(18,2) NOT NULL;

  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ADD CONSTRAINT FK_DEBTRECOVERY1_DATE_PREV FOREIGN KEY (PAYMENT_DATE)
    REFERENCES DATA.DIM_DATE(DATE_KEY);
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ADD CONSTRAINT FK_DEBTRECOVERY1_PRODUCT_PREV FOREIGN KEY (PRODUCT_KEY)
    REFERENCES DATA.DIM_PRODUCT(PRODUCT_KEY);
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ADD CONSTRAINT FK_DEBTRECOVERY1_NEGOTIATOR_PREV FOREIGN KEY (NEGOTIATOR_KEY)
    REFERENCES DATA.DIM_NEGOTIATOR(NEGOTIATOR_KEY);
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ADD CONSTRAINT FK_DEBTRECOVERY1_CURRENCY_PREV FOREIGN KEY (CURRENCY_KEY)
    REFERENCES DATA.DIM_CURRENCY(CURRENCY_KEY);

  -- STEP 03: REPLACE SYNONYM DATA.DEBT_RECOVERY TO DATA.DEBT_RECOVERY_1_PREV
  DROP SYNONYM DATA.DEBT_RECOVERY;
  CREATE SYNONYM DATA.DEBT_RECOVERY FOR DATA.DEBT_RECOVERY_1_PREV;

  -- STEP 04: RENAME TABLE DATA.DEBT_RECOVERY_1 TO DATA.DEBT_RECOVERY_1_OLD
  EXEC sp_rename 'DATA.DEBT_RECOVERY_1', 'DEBT_RECOVERY_1_OLD';

  -- STEP 05: RENAME INDEXES AND CONSTRAINTS DATA.DEBT_RECOVERY_1_OLD
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_DATE', 'FK_DEBTRECOVERY1_DATE_OLD';
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_PRODUCT', 'FK_DEBTRECOVERY1_PRODUCT_OLD';
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_NEGOTIATOR', 'FK_DEBTRECOVERY1_NEGOTIATOR_OLD';
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_CURRENCY', 'FK_DEBTRECOVERY1_CURRENCY_OLD';

  -- STEP 06: REPLACE SYNONYM DATA.DEBT_RECOVERY TO DATA.DEBT_RECOVERY_1_OLD
  DROP SYNONYM DATA.DEBT_RECOVERY;
  CREATE SYNONYM DATA.DEBT_RECOVERY FOR DATA.DEBT_RECOVERY_1_OLD;

  -- STEP 07: RENAME TABLE DATA.DEBT_RECOVERY_1_PREV TO DATA.DEBT_RECOVERY_1
  EXEC sp_rename 'DATA.DEBT_RECOVERY_1_PREV', 'DEBT_RECOVERY_1';

  -- STEP 08: RENAME INDEXES AND CONSTRAINTS DATA.DEBT_RECOVERY_1_PREV 
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_DATE_PREV', 'FK_DEBTRECOVERY1_DATE';
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_PRODUCT_PREV', 'FK_DEBTRECOVERY1_PRODUCT';
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_NEGOTIATOR_PREV', 'FK_DEBTRECOVERY1_NEGOTIATOR';
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_CURRENCY_PREV', 'FK_DEBTRECOVERY1_CURRENCY';

  -- STEP 09: REPLACE SYNONYM DATA.DEBT_RECOVERY TO DATA.DEBT_RECOVERY_1
  DROP SYNONYM DATA.DEBT_RECOVERY;
  CREATE SYNONYM DATA.DEBT_RECOVERY FOR DATA.DEBT_RECOVERY_1;

  -- STEP 10: DROP OLD TABLE
  IF OBJECT_ID(N'[CIP_DM].[DATA].[DEBT_RECOVERY_1_OLD]',N'U') IS NOT NULL DROP TABLE CIP_DM.DATA.DEBT_RECOVERY_1_OLD;

  END TRY

  BEGIN CATCH

    DECLARE @ERROR_MESSAGE NVARCHAR(4000);
    DECLARE @ERROR_SEVERITY INT;
    DECLARE @ERROR_STATE INT;

    SELECT
      @ERROR_MESSAGE = ERROR_MESSAGE(),
      @ERROR_SEVERITY = ERROR_SEVERITY(),
      @ERROR_STATE = ERROR_STATE();

    RAISERROR (@ERROR_MESSAGE, @ERROR_SEVERITY, @ERROR_STATE);

  END CATCH

END;