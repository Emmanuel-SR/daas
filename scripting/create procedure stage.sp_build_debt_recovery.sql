CREATE PROCEDURE STAGE.SP_BUILD_DEBT_RECOVERY AS

BEGIN

  BEGIN TRY
  
  -- STEP 01: CREATE TABLE DATA.DEBT_RECOVERY_1_PREV
  IF OBJECT_ID(N'[CIP_DM].[DATA].[DEBT_RECOVERY_1_PREV]',N'U') IS NOT NULL DROP TABLE CIP_DM.DATA.DEBT_RECOVERY_1_PREV;

  SELECT
    P.DATE_KEY,
    H.NEGOTIATOR_KEY,
    P.CURRENCY_KEY,
    COUNT(P.AMOUNT) AS PAYMENTS,
    SUM(P.AMOUNT) AS AMOUNT_RECOVERED,
    (
    SELECT 
      COUNT(1)
    FROM DATA.HIST_ASSIGNMENT H2
    WHERE H2.NEGOTIATOR_KEY = H.NEGOTIATOR_KEY AND LEFT(P.DATE_KEY,6) = H2.PERIOD_CODE
      AND EXISTS
      (
        SELECT
          1
        FROM DATA.FACT_PAYMENT P2
        WHERE
        P2.DATE_KEY = P.DATE_KEY AND P2.CREDIT_KEY = H2.CREDIT_KEY AND P2.CURRENCY_KEY = P.CURRENCY_KEY
      )
    ) AS CREDIT_RECOVERED,
    (
    SELECT 
      COUNT(1)
    FROM DATA.HIST_ASSIGNMENT H2
    WHERE H2.NEGOTIATOR_KEY = H.NEGOTIATOR_KEY AND LEFT(P.DATE_KEY,6) = H2.PERIOD_CODE
      AND NOT EXISTS
      (
        SELECT
          1
        FROM DATA.FACT_PAYMENT P2
        WHERE
        P2.DATE_KEY = P.DATE_KEY AND P2.CREDIT_KEY = H2.CREDIT_KEY AND P2.CURRENCY_KEY = P.CURRENCY_KEY
      )
    ) AS CREDIT_NOT_RECOVERED
  INTO DATA.DEBT_RECOVERY_1_PREV
  FROM DATA.HIST_ASSIGNMENT H
  INNER JOIN DATA.FACT_PAYMENT P
  ON LEFT(P.DATE_KEY,6) = H.PERIOD_CODE
    AND P.CREDIT_KEY = H.CREDIT_KEY
   GROUP BY  H.NEGOTIATOR_KEY, P.DATE_KEY, P.CURRENCY_KEY
   ORDER BY P.DATE_KEY ASC;

  -- STEP 02: CREATE INDEXES AND CONSTRAINTS DATA.DEBT_RECOVERY_1_PREV
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN DATE_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN NEGOTIATOR_KEY INTEGER NOT NULL;
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN CURRENCY_KEY CHAR(3) NOT NULL;
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN PAYMENTS INTEGER NOT NULL;
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN AMOUNT_RECOVERED DECIMAL(18,2) NOT NULL;
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN CREDIT_RECOVERED INTEGER NOT NULL;
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ALTER COLUMN CREDIT_NOT_RECOVERED INTEGER NOT NULL;

  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ADD CONSTRAINT FK_DEBTRECOVERY1_DATE_PREV FOREIGN KEY (DATE_KEY)
    REFERENCES DATA.DIM_DATE(DATE_KEY);
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ADD CONSTRAINT FK_DEBTRECOVERY1_NEGOTIATOR_PREV FOREIGN KEY (NEGOTIATOR_KEY)
    REFERENCES DATA.DIM_NEGOTIATOR(NEGOTIATOR_KEY);
  ALTER TABLE DATA.DEBT_RECOVERY_1_PREV ADD CONSTRAINT FK_DEBTRECOVERY1_CURRENCY_PREV FOREIGN KEY (CURRENCY_KEY)
    REFERENCES DATA.DIM_CURRENCY(CURRENCY_KEY);

  -- STEP 03: REPLACE SYNONYM DATA.DEBT_RECOVERY TO DATA.DEBT_RECOVERY_1_PREV
  DROP SYNONYM DATA.DEBT_RECOVERY;
  CREATE SYNONYM DATA.DEBT_RECOVERY FOR DATA.DEBT_RECOVERY_1_PREV;

  -- STEP 04: RENAME TABLE DATA.DEBT_RECOVERY_1 TO DATA.DEBT_RECOVERY_1_OLD
  EXEC sp_rename 'DATA.DEBT_RECOVERY_1', 'DEBT_RECOVERY_1_OLD';

  -- STEP 05: RENAME INDEXES AND CONSTRAINTS DATA.DEBT_RECOVERY_1_OLD
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_DATE', 'FK_DEBTRECOVERY1_DATE_OLD';
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_NEGOTIATOR', 'FK_DEBTRECOVERY1_NEGOTIATOR_OLD';
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_CURRENCY', 'FK_DEBTRECOVERY1_CURRENCY_OLD';

  -- STEP 06: REPLACE SYNONYM DATA.DEBT_RECOVERY TO DATA.DEBT_RECOVERY_1_OLD
  DROP SYNONYM DATA.DEBT_RECOVERY;
  CREATE SYNONYM DATA.DEBT_RECOVERY FOR DATA.DEBT_RECOVERY_1_OLD;

  -- STEP 07: RENAME TABLE DATA.DEBT_RECOVERY_1_PREV TO DATA.DEBT_RECOVERY_1
  EXEC sp_rename 'DATA.DEBT_RECOVERY_1_PREV', 'DEBT_RECOVERY_1';

  -- STEP 08: RENAME INDEXES AND CONSTRAINTS DATA.DEBT_RECOVERY_1_PREV 
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_DATE_PREV', 'FK_DEBTRECOVERY1_DATE';
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_NEGOTIATOR_PREV', 'FK_DEBTRECOVERY1_NEGOTIATOR';
  EXEC sp_rename 'DATA.FK_DEBTRECOVERY1_CURRENCY_PREV', 'FK_DEBTRECOVERY1_CURRENCY';

  -- STEP 09: REPLACE SYNONYM DATA.DEBT_RECOVERY TO DATA.DEBT_RECOVERY_1
  DROP SYNONYM DATA.DEBT_RECOVERY;
  CREATE SYNONYM DATA.DEBT_RECOVERY FOR DATA.DEBT_RECOVERY_1;

  -- STEP 10: DROP OLD TABLE
  IF OBJECT_ID(N'[CIP_DM].[DATA].[DEBT_RECOVERY_1_OLD]',N'U') IS NOT NULL DROP TABLE CIP_DM.DATA.DEBT_RECOVERY_1_OLD;

  END TRY

  BEGIN CATCH

    DECLARE @ERROR_MESSAGE NVARCHAR(4000);
    DECLARE @ERROR_SEVERITY INT;
    DECLARE @ERROR_STATE INT;

    SELECT
      @ERROR_MESSAGE = ERROR_MESSAGE(),
      @ERROR_SEVERITY = ERROR_SEVERITY(),
      @ERROR_STATE = ERROR_STATE();

    RAISERROR (@ERROR_MESSAGE, @ERROR_SEVERITY, @ERROR_STATE);

  END CATCH

END;